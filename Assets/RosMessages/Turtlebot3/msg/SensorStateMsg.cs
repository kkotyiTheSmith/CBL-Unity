//Do not edit! This file was generated by Unity-ROS MessageGeneration.
using System;
using System.Linq;
using System.Collections.Generic;
using System.Text;
using Unity.Robotics.ROSTCPConnector.MessageGeneration;
using RosMessageTypes.Std;

namespace RosMessageTypes.Turtlebot3
{
    [Serializable]
    public class SensorStateMsg : Message
    {
        public const string k_RosMessageName = "turtlebot3_msgs/SensorState";
        public override string RosMessageName => k_RosMessageName;

        // #######################################
        //  CONSTANTS
        // #######################################
        //  Bumper states (states are combined, when multiple bumpers are pressed)
        public const byte BUMPER_FORWARD = 1;
        public const byte BUMPER_BACKWARD = 2;
        //  Cliff sensor states (states are combined, when multiple cliff sensors are triggered)
        public const byte CLIFF = 1;
        //  Sonar sensor states (states are combined, when multiple sonar sensors are triggered)
        public const byte SONAR = 1;
        //  Illumination sensor (states are combined, when multiple illumination sensors are triggered) 
        public const byte ILLUMINATION = 1;
        //  Button states (states are combined, when multiple buttons are pressed)
        public const byte BUTTON0 = 1;
        public const byte BUTTON1 = 2;
        //  Motor errors
        public const byte ERROR_LEFT_MOTOR = 1;
        public const byte ERROR_RIGHT_MOTOR = 2;
        //  Motor torque
        public const byte TORQUE_ON = 1;
        public const byte TORQUE_OFF = 2;
        // #######################################
        //  Messages
        // #######################################
        public HeaderMsg header;
        public byte bumper;
        public float cliff;
        public float sonar;
        public float illumination;
        public byte led;
        public byte button;
        public bool torque;
        public int left_encoder;
        //  (-2,147,483,648 ~ 2,147,483,647)
        public int right_encoder;
        //  (-2,147,483,648 ~ 2,147,483,647)
        public float battery;

        public SensorStateMsg()
        {
            this.header = new HeaderMsg();
            this.bumper = 0;
            this.cliff = 0.0f;
            this.sonar = 0.0f;
            this.illumination = 0.0f;
            this.led = 0;
            this.button = 0;
            this.torque = false;
            this.left_encoder = 0;
            this.right_encoder = 0;
            this.battery = 0.0f;
        }

        public SensorStateMsg(HeaderMsg header, byte bumper, float cliff, float sonar, float illumination, byte led, byte button, bool torque, int left_encoder, int right_encoder, float battery)
        {
            this.header = header;
            this.bumper = bumper;
            this.cliff = cliff;
            this.sonar = sonar;
            this.illumination = illumination;
            this.led = led;
            this.button = button;
            this.torque = torque;
            this.left_encoder = left_encoder;
            this.right_encoder = right_encoder;
            this.battery = battery;
        }

        public static SensorStateMsg Deserialize(MessageDeserializer deserializer) => new SensorStateMsg(deserializer);

        private SensorStateMsg(MessageDeserializer deserializer)
        {
            this.header = HeaderMsg.Deserialize(deserializer);
            deserializer.Read(out this.bumper);
            deserializer.Read(out this.cliff);
            deserializer.Read(out this.sonar);
            deserializer.Read(out this.illumination);
            deserializer.Read(out this.led);
            deserializer.Read(out this.button);
            deserializer.Read(out this.torque);
            deserializer.Read(out this.left_encoder);
            deserializer.Read(out this.right_encoder);
            deserializer.Read(out this.battery);
        }

        public override void SerializeTo(MessageSerializer serializer)
        {
            serializer.Write(this.header);
            serializer.Write(this.bumper);
            serializer.Write(this.cliff);
            serializer.Write(this.sonar);
            serializer.Write(this.illumination);
            serializer.Write(this.led);
            serializer.Write(this.button);
            serializer.Write(this.torque);
            serializer.Write(this.left_encoder);
            serializer.Write(this.right_encoder);
            serializer.Write(this.battery);
        }

        public override string ToString()
        {
            return "SensorStateMsg: " +
            "\nheader: " + header.ToString() +
            "\nbumper: " + bumper.ToString() +
            "\ncliff: " + cliff.ToString() +
            "\nsonar: " + sonar.ToString() +
            "\nillumination: " + illumination.ToString() +
            "\nled: " + led.ToString() +
            "\nbutton: " + button.ToString() +
            "\ntorque: " + torque.ToString() +
            "\nleft_encoder: " + left_encoder.ToString() +
            "\nright_encoder: " + right_encoder.ToString() +
            "\nbattery: " + battery.ToString();
        }

#if UNITY_EDITOR
        [UnityEditor.InitializeOnLoadMethod]
#else
        [UnityEngine.RuntimeInitializeOnLoadMethod]
#endif
        public static void Register()
        {
            MessageRegistry.Register(k_RosMessageName, Deserialize);
        }
    }
}
